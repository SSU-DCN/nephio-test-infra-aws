---
# tasks file for k8s_master
- name: update APT packages
  apt:
    update_cache: yes

- name: Make users passwordless for sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    line: 'ubuntu ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: disable SWAP (Kubeadm requirement)
  shell: |
    swapoff -a

- name: disable SWAP in fstab (Kubeadm requirement)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: create an empty file for the Containerd module
  copy:
    content: ""
    dest: /etc/modules-load.d/containerd.conf
    force: no

- name: configure modules for Containerd
  blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
          overlay
          br_netfilter

- name: create an empty file for Kubernetes sysctl params
  copy:
    content: ""
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    force: no

- name: configure sysctl params for Kubernetes
  lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    line: "{{ item }}"
  with_items:
    - 'net.bridge.bridge-nf-call-iptables  = 1'
    - 'net.ipv4.ip_forward                 = 1'
    - 'net.bridge.bridge-nf-call-ip6tables = 1'

- name: apply sysctl params without reboot
  command: sysctl --system

- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present

- name: add Docker apt-key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker-apt-keyring.asc
    mode: '0644'
    force: true
- name: Gather facts
  setup:

- name: add Docker's APT repository
  apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes

- name: add Kubernetes apt-key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true

- name: add Kubernetes' APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
    state: present
    update_cache: yes

- name: install Containerd
  apt:
    name: containerd.io
    state: present

- name: create Containerd directory
  file:
    path: /etc/containerd
    state: directory

- name: add Containerd configuration
  shell: /usr/bin/containerd config default > /etc/containerd/config.toml

- name: configuring the systemd cgroup driver for Containerd
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '            SystemdCgroup = false'
    line: '            SystemdCgroup = true'

- name: enable the Containerd service and start it
  systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: install Kubelet
  apt:
    name: kubelet=1.29.*
    state: present
    update_cache: true

- name: install Kubeadm
  apt:
    name: kubeadm=1.29.*
    state: present

- name: enable the Kubelet service, and enable it persistently
  service:
    name: kubelet
    enabled: yes

- name: load br_netfilter kernel module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: set bridge-nf-call-iptables
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: set ip_forward
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1


# - name: Staring & enabling Docker & kubelet on Master Node
#   service:
#     name: "{{ item }}"
#     state: started
#     enabled: yes
#   loop: "{{ service_names }}"

- name: Pulling the images of k8s master
  command: kubeadm config images pull


- name: Initializing k8s cluster
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem

- name: Setting up kubectl on Master Node
  shell:
    cmd: |
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
- name: Deploying Flannel on Master Node
  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

- name: Creating token for Slave
  command: kubeadm token create  --print-join-command
  register: token

- name: Cleaning Caches on RAM
  shell: echo 3 > /proc/sys/vm/drop_caches

- name: Install Docker packages
  apt:
    name: 
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose
    state: present
  
- name: Add user to docker group
  user:
    name: "ubuntu"
    groups: docker
    append: yes

- name: Set permissions on docker socket
  file:
    path: "/var/run/docker.sock"
    mode: "0666"
    owner: "root"
    group: "docker"
